const list1 = [
    "土王",
    "走鲸",
    "布拨",
    "苍响",
    "铜象",
    "蓝鸦",
    "懒人獭",
    "萌虻",
    "胡帕",
    "嗡蝠",
    "冰宝",
    "妙喵",
    "铁蚁",
    "牙牙",
    "酷豹",
    "谢米",
    "月石",
    "凤王",
    "水君",
    "炎帝",
    "雷公",
    "顿甲",
    "狃拉",
    "壶壶",
    "天蝎",
    "梦妖",
    "沼王",
    "乌波",
    "电龙",
    "皮丘",
    "咕咕",
    "尾立",
    "蓝鳄",
    "梦幻",
    "超梦",
    "快龙",
    "伊布",
    "袋兽",
    "蛋蛋",
    "耿鬼",
    "鬼斯",
    "臭泥",
    "嘟嘟",
    "怪力",
    "豪力",
    "腕力",
    "胡地",
    "凯西",
    "猴怪",
    "喵喵",
    "地鼠",
    "毛球",
    "九尾",
    "六尾",
    "雷丘",
    "烈雀",
    "拉达",
    "波波",
    "桃歹郎",
    "铁头壳",
    "铁磐岩",
    "猛雷鼓",
    "破空焰",
    "厄诡椪",
    "吉雉鸡",
    "愿增猿",
    "够赞狗",
    "斯魔茶",
    "裹蜜虫",
    "铁斑叶",
    "波荡水",
    "密勒顿",
    "故勒顿",
    "铁武者",
    "轰鸣月",
    "古玉鱼",
    "古鼎鹿",
    "古剑豹",
    "古简蜗",
    "赛富豪",
    "索财灵",
    "戟脊龙",
    "冻脊龙",
    "凉脊龙",
    "铁荆棘",
    "铁毒蛾",
    "铁脖颈",
    "铁臂膀",
    "铁包袱",
    "铁辙迹",
    "沙铁皮",
    "爬地翅",
    "振翼发",
    "猛恶菇",
    "吼叫尾",
    "雄伟牙",
    "奇麒麟",
    "弃世猴",
    "米立龙",
    "吃吼霸",
    "轻身鳕",
    "浩大鲸",
    "缠红鹤",
    "墓扬犬",
    "墓仔狗",
    "晶光花",
    "晶光芽",
    "拖拖蚓",
    "摩托蜥",
    "噗隆隆",
    "海豚侠",
    "下石鸟",
    "海地鼠",
    "巨锻匠",
    "巧锻匠",
    "小锻匠",
    "飘飘雏",
    "虫甲圣",
    "虫滚泥",
    "狠辣椒",
    "热辣娃",
    "毛崖蟹",
    "纳噬草",
    "涂标客",
    "滋汁鼹",
    "獒教父",
    "偶叫獒",
    "电海燕",
    "电肚蛙",
    "光蚪仔",
    "炭小侍",
    "盐石垒",
    "盐石宝",
    "怒鹦哥",
    "奥利瓦",
    "奥利纽",
    "迷你芙",
    "麻花犬",
    "狗仔包",
    "一家鼠",
    "一对鼠",
    "布土拨",
    "烈腿蝗",
    "豆蟋蟀",
    "操陷蛛",
    "团珠蛛",
    "飘香豚",
    "爱吃豚",
    "涌跃鸭",
    "润水鸭",
    "炙烫鳄",
    "呆火鳄",
    "蒂蕾喵",
    "新叶喵",
    "眷恋云",
    "万针鱼",
    "大狃拉",
    "月月熊",
    "诡角鹿",
    "蕾冠王",
    "灵幽马",
    "雪暴马",
    "萨戮德",
    "熊徒弟",
    "多龙奇",
    "铝钢龙",
    "鳃鱼龙",
    "雷鸟龙",
    "爱管侍",
    "冰砌鹅",
    "巨石丁",
    "雪绒蛾",
    "雪吞虫",
    "列阵兵",
    "霜奶仙",
    "小仙奶",
    "死神板",
    "葱游兵",
    "喵头目",
    "堵拦熊",
    "诈唬魔",
    "怖思壶",
    "来悲茶",
    "拳拳蛸",
    "焚焰蚣",
    "烧火蚣",
    "毒电婴",
    "刺梭鱼",
    "古月鸟",
    "沙螺蟒",
    "沙包蛇",
    "丰蜜龙",
    "苹裹龙",
    "啃果虫",
    "巨炭山",
    "大炭车",
    "小炭仔",
    "逐电犬",
    "来电汪",
    "暴噬龟",
    "咬咬龟",
    "毛辫羊",
    "白蓬蓬",
    "幼棉棉",
    "狐大盗",
    "偷儿狐",
    "天罩虫",
    "索侦虫",
    "钢铠鸦",
    "稚山雀",
    "变涩蜥",
    "泪眼蜥",
    "炎兔儿",
    "啪咚猴",
    "敲音猴",
    "美录坦",
    "垒磊石",
    "毒贝比",
    "玛夏多",
    "纸御剑",
    "电束木",
    "爆肌蚊",
    "鳞甲龙",
    "心鳞宝",
    "老翁龙",
    "谜拟Ｑ",
    "小陨星",
    "拳海参",
    "沙丘娃",
    "胆小虫",
    "投掷猴",
    "智挥猩",
    "甜舞妮",
    "甜竹竹",
    "穿著熊",
    "童偶熊",
    "焰后蜥",
    "睡睡菇",
    "兰螳花",
    "伪螳草",
    "滴蛛霸",
    "泥驴仔",
    "超坏星",
    "好坏星",
    "弱丁鱼",
    "岩狗狗",
    "花舞鸟",
    "好胜蟹",
    "虫电宝",
    "猫鼬少",
    "小笃儿",
    "炎热喵",
    "火斑喵",
    "投羽枭",
    "木木枭",
    "蒂安希"
]
const list2 = [
    "冰岩怪",
    "南瓜精",
    "朽木妖",
    "小木灵",
    "钥圈儿",
    "黏美龙",
    "黏美儿",
    "黏黏宝",
    "小碎钻",
    "咚咚鼠",
    "冰雪龙",
    "怪颚龙",
    "伞电蜥",
    "毒藻龙",
    "垃垃藻",
    "龟脚脚",
    "乌贼王",
    "好啦鱿",
    "胖甜妮",
    "芳香精",
    "粉香香",
    "双剑鞘",
    "独剑鞘",
    "花叶蒂",
    "花蓓蓓",
    "火炎狮",
    "小狮狮",
    "彩粉蝶",
    "粉蝶蛹",
    "粉蝶虫",
    "烈箭鹰",
    "火箭雀",
    "小箭雀",
    "掘地兔",
    "掘掘兔",
    "呱头蛙",
    "火狐狸",
    "哈力栗",
    "酋雷姆",
    "土地云",
    "雷电云",
    "龙卷云",
    "火神蛾",
    "燃烧虫",
    "单首龙",
    "熔蚁兽",
    "秃鹰娜",
    "赤面龙",
    "师父鼬",
    "功夫鼬",
    "泥巴鱼",
    "敏捷虫",
    "小嘴蜗",
    "冻原熊",
    "喷嚏熊",
    "斧牙龙",
    "烛光灵",
    "大宇怪",
    "小灰怪",
    "麻麻鳗",
    "齿轮怪",
    "齿轮组",
    "齿轮儿",
    "电蜘蛛",
    "电电虫",
    "胖嘟嘟",
    "轻飘飘",
    "盖盖虫",
    "电飞鼠",
    "萌芽鹿",
    "四季鹿",
    "多多冰",
    "迷你冰",
    "舞天鹅",
    "鸭宝宝",
    "索罗亚",
    "灰尘山",
    "破破袋",
    "死神棺",
    "象征鸟",
    "石居蟹",
    "流氓鳄",
    "混混鳄",
    "黑眼鳄",
    "蜈蚣王",
    "车轮球",
    "保姆虫",
    "宝包茧",
    "虫宝包",
    "打击鬼",
    "投摔鬼",
    "蟾蜍王",
    "蓝蟾蜍",
    "圆蝌蚪",
    "心蝙蝠",
    "庞岩怪",
    "地幔岩",
    "石丸子",
    "斑斑马",
    "雨翅蛾",
    "豆豆鸽",
    "梦梦蚀",
    "食梦梦",
    "冷水猿",
    "冷水猴",
    "爆香猿",
    "爆香猴",
    "花椰猿",
    "花椰猴",
    "扒手猫",
    "长毛狗",
    "哈约克",
    "小约克",
    "步哨鼠",
    "探探鼠",
    "大剑鬼",
    "双刃丸",
    "水水獭",
    "炎武王",
    "炒炒猪",
    "暖暖猪",
    "君主蛇",
    "青藤蛇",
    "藤藤蛇",
    "玛纳霏",
    "霏欧纳",
    "由克希",
    "洛托姆",
    "雪妖女",
    "象牙猪",
    "斗笠菇",
    "冰伊布",
    "叶伊布",
    "巨蔓藤",
    "大舌舔",
    "玛狃拉",
    "暴雪王",
    "雪笠怪",
    "霓虹鱼",
    "荧光鱼",
    "尖牙笼",
    "毒骷蛙",
    "不良蛙",
    "龙王蝎",
    "钳尾蝎",
    "河马兽",
    "沙河马",
    "利欧路",
    "圆陆鲨",
    "花岩怪",
    "聒噪鸟",
    "小福蛋",
    "盆才怪",
    "青铜钟",
    "铜镜怪",
    "臭鼬噗",
    "铃铛响",
    "东施喵",
    "魅力喵",
    "蘑蘑菇",
    "长耳兔",
    "卷卷耳",
    "随风球",
    "飘飘球",
    "海兔兽",
    "樱花儿",
    "樱花宝",
    "浮潜鼬",
    "泳圈鼬",
    "蜂女王",
    "三蜜蜂",
    "绅士蛾",
    "结草儿",
    "护城龙",
    "盾甲龙",
    "战槌龙",
    "头盖龙",
    "含羞苞",
    "伦琴猫",
    "勒克猫",
    "小猫怪",
    "音箱蟀",
    "圆法师",
    "大尾狸",
    "大牙狸",
    "姆克鹰",
    "姆克鸟",
    "姆克儿",
    "波皇子",
    "波加曼",
    "烈焰猴",
    "猛火猴",
    "土台龟",
    "树林龟",
    "草苗龟",
    "基拉祈",
    "烈空坐",
    "固拉多",
    "盖欧卡",
    "巨金怪",
    "金属怪",
    "铁哑铃",
    "暴飞龙",
    "甲壳龙",
    "宝贝龙",
    "爱心鱼",
    "樱花鱼",
    "猎斑鱼",
    "珍珠贝",
    "海魔狮",
    "海豹球",
    "冰鬼护",
    "雪童子",
    "小果然",
    "风铃铃",
    "热带龙",
    "夜巡灵",
    "变隐龙",
    "美纳斯",
    "丑丑鱼",
    "天秤偶",
    "鲶鱼王",
    "泥泥鳅",
    "太阳岩",
    "饭匙蛇",
    "猫鼬斩",
    "青绵鸟",
    "大颚蚁",
    "晃晃斑",
    "噗噗猪",
    "跳跳猪",
    "煤炭龟",
    "喷火驼",
    "呆火驼",
    "吼鲸王",
    "吼吼鲸",
    "巨牙鲨",
    "利牙鱼",
    "吞食兽",
    "溶食兽",
    "毒蔷薇",
    "甜甜萤",
    "电萤虫",
    "雷电兽",
    "落雷兽",
    "恰雷姆",
    "玛沙那",
    "可多拉",
    "勾魂眼",
    "优雅猫",
    "向尾喵",
    "朝北鼻",
    "爆音怪",
    "吼爆弹",
    "咕妞妞",
    "请假王"
]

function hasDuplicate(arr) {
    const seen = new Set();

    for (const str of arr) {
        if (seen.has(str)) {
            console.log(str);
            return true; // 找到重复
        }
        seen.add(str);
    }

    return false; // 没有重复
}


function hasPrefixConflictShortStrings(arr) {
    const prefixSet = new Set();

    for (const str of arr) {
        // 对每个字符串生成所有前缀（长度1或2）
        for (let i = 1; i < str.length; i++) {
            prefixSet.add(str.slice(0, i));
        }
    }

    // 检查是否有字符串本身存在于前缀集合
    for (const str of arr) {
        if (prefixSet.has(str)) {
            console.log('conflict', str);
            return true;
        }
    }

    return false;
}


function seededShuffle(array, seed = String(Math.floor(Date.now() / (24 * 36e5)))) {
    // 将日期字符串转换为数字种子
    let numericSeed = 0;
    for (let i = 0; i < seed.length; i++) {
        numericSeed += seed.charCodeAt(i);
    }

    // 自定义伪随机数生成器
    function random() {
        const x = Math.sin(numericSeed++) * 10000;
        return x - Math.floor(x);
    }

    // Fisher-Yates洗牌算法
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}


const possibleLength = [2, 3];
let words = [list1, list2];
words = words.map(a => seededShuffle(a))
const flat = words.flat()
console.log('conflict', hasPrefixConflictShortStrings(flat));
console.log('repeat', hasDuplicate(flat));
function searchText(arr, text) {
    let index;
    let len;
    arr.some((word, i) => {
        if (text.startsWith(word)) {
            index = i;
            len = word.length;
            return true;
        }
    });
    return {
        index,
        len
    };
}

const mode = {
    min: 1,
    withPunctuation: true,
    check(text) {
        return list1.some(v => {
            return text.startsWith(v);
        });
    },
    encode(raw) {
        const code = raw.charCodeAt(0);
        const text =
            words[0][Math.floor(code / 256)] +
            words[1][Math.floor(code % 256)] + '；'
        return {
            len: 1,
            text
        };
        // var output = "";
        // en_index = 0;
        // text = text.replace(/\n/g, "");
        // for (var i in text) {
        //     code = text.charCodeAt(i);
        //     console.log("code", code);
        //     output += encrypt_put(parseInt(code / 256));
        //     output += encrypt_put(code % 256);
        // }
        // return output;

        // return encryptPut4(parseInt(bit8 / 16)) + encryptPut4(bit8 % 16);
    },
    decode(text) {
        let decodeIndex = 0;
        let resultStr = "";
        const decodeArr = [];

        let pos = 0;
        do {
            const { len, index } = searchText(words[decodeIndex], text.slice(pos));
            decodeArr[decodeIndex] = index;
            decodeIndex++;
            pos += len;
            if (decodeIndex == words.length) {
                decodeIndex = 0;
                let ch = 0;
                for (let i = 0; i < words.length; i++) {
                    ch += decodeArr[i] * Math.pow(256, 1 - i);
                }

                resultStr += String.fromCharCode(ch);
            }
        } while (pos < text.length);
        return resultStr;
    }
};
window.modes.push(mode);